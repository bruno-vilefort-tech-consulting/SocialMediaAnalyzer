import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, deleteDoc, doc, query, where } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: process.env.VITE_FIREBASE_API_KEY,
  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,
  projectId: process.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,
  appId: process.env.VITE_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function limparDadosIncorretos() {
  try {
    console.log('üßπ Limpando dados incorretos do Firebase...');
    
    // 1. Buscar sele√ß√£o "Faxineira Ita√∫"
    const selectionsSnapshot = await getDocs(collection(db, "selections"));
    let faxineiraItauSelection = null;
    
    selectionsSnapshot.forEach(doc => {
      const data = doc.data();
      if (data.name && data.name.includes('Faxineira Ita√∫')) {
        faxineiraItauSelection = { id: doc.id, ...data };
        console.log(`‚úÖ Sele√ß√£o "Faxineira Ita√∫" encontrada: ${doc.id}`);
      }
    });
    
    if (!faxineiraItauSelection) {
      console.log('‚ùå Sele√ß√£o "Faxineira Ita√∫" n√£o encontrada');
      return;
    }
    
    // 2. Buscar candidatos da Lista 2025 (que deve ter apenas Daniel Braga)
    const candidatesSnapshot = await getDocs(collection(db, "candidates"));
    const danielCandidates = [];
    const otherCandidates = [];
    
    candidatesSnapshot.forEach(doc => {
      const data = doc.data();
      if (data.name && data.name.includes('Daniel')) {
        danielCandidates.push({ id: doc.id, ...data });
        console.log(`üë§ Daniel encontrado: ${data.name} (${data.whatsapp || data.phone})`);
      } else {
        otherCandidates.push({ id: doc.id, ...data });
      }
    });
    
    console.log(`üìä Candidatos Daniel: ${danielCandidates.length}`);
    console.log(`üìä Outros candidatos: ${otherCandidates.length}`);
    
    // 3. Buscar entrevistas relacionadas √† sele√ß√£o "Faxineira Ita√∫"
    const interviewsSnapshot = await getDocs(collection(db, "interviews"));
    const faxineiraInterviews = [];
    const otherInterviews = [];
    
    interviewsSnapshot.forEach(doc => {
      const data = doc.data();
      const interviewData = { id: doc.id, ...data };
      
      // Verificar se √© entrevista relacionada √† "Faxineira Ita√∫"
      if (
        data.selectionId === parseInt(faxineiraItauSelection.id) || 
        data.selectionId === faxineiraItauSelection.id ||
        (data.candidateName && data.candidateName.includes('Daniel'))
      ) {
        faxineiraInterviews.push(interviewData);
        console.log(`üéØ Entrevista Faxineira Ita√∫: ${doc.id} - ${data.candidateName} (${data.status})`);
      } else {
        otherInterviews.push(interviewData);
      }
    });
    
    console.log(`üìä Entrevistas Faxineira Ita√∫: ${faxineiraInterviews.length}`);
    console.log(`üìä Outras entrevistas: ${otherInterviews.length}`);
    
    // 4. Manter apenas as entrevistas mais recentes do Daniel para Faxineira Ita√∫
    const danielInterviewsForFaxineira = faxineiraInterviews.filter(interview => 
      interview.candidateName && interview.candidateName.includes('Daniel')
    );
    
    // Ordenar por ID (mais recente = maior ID) e manter apenas a mais recente
    const sortedDanielInterviews = danielInterviewsForFaxineira.sort((a, b) => 
      parseInt(b.id) - parseInt(a.id)
    );
    
    const latestDanielInterview = sortedDanielInterviews[0];
    const oldDanielInterviews = sortedDanielInterviews.slice(1);
    
    if (latestDanielInterview) {
      console.log(`‚úÖ Mantendo entrevista mais recente do Daniel: ${latestDanielInterview.id}`);
    }
    
    // 5. Deletar entrevistas antigas do Daniel
    console.log(`üóëÔ∏è Deletando ${oldDanielInterviews.length} entrevistas antigas do Daniel...`);
    for (const interview of oldDanielInterviews) {
      await deleteDoc(doc(db, "interviews", interview.id));
      console.log(`‚ùå Entrevista deletada: ${interview.id}`);
    }
    
    // 6. Deletar entrevistas de outros candidatos que n√£o deveriam estar na sele√ß√£o Faxineira Ita√∫
    const wrongInterviews = faxineiraInterviews.filter(interview => 
      !interview.candidateName || !interview.candidateName.includes('Daniel')
    );
    
    console.log(`üóëÔ∏è Deletando ${wrongInterviews.length} entrevistas incorretas...`);
    for (const interview of wrongInterviews) {
      await deleteDoc(doc(db, "interviews", interview.id));
      console.log(`‚ùå Entrevista incorreta deletada: ${interview.id}`);
    }
    
    // 7. Buscar e limpar respostas √≥rf√£s (que n√£o pertencem √† entrevista v√°lida)
    const responsesSnapshot = await getDocs(collection(db, "responses"));
    const validResponsesCount = [];
    const orphanResponses = [];
    
    responsesSnapshot.forEach(doc => {
      const data = doc.data();
      if (latestDanielInterview && data.interviewId === parseInt(latestDanielInterview.id)) {
        validResponsesCount.push({ id: doc.id, ...data });
      } else {
        // Verificar se a entrevista ainda existe
        const interviewExists = faxineiraInterviews.some(interview => 
          data.interviewId === parseInt(interview.id)
        );
        if (!interviewExists) {
          orphanResponses.push({ id: doc.id, ...data });
        }
      }
    });
    
    console.log(`üìù Respostas v√°lidas da entrevista do Daniel: ${validResponsesCount.length}`);
    console.log(`üóëÔ∏è Deletando ${orphanResponses.length} respostas √≥rf√£s...`);
    
    for (const response of orphanResponses) {
      await deleteDoc(doc(db, "responses", response.id));
      console.log(`‚ùå Resposta √≥rf√£ deletada: ${response.id}`);
    }
    
    // 8. Resumo final
    console.log('\nüìä RESUMO DA LIMPEZA:');
    console.log(`‚úÖ Sele√ß√£o "Faxineira Ita√∫": ${faxineiraItauSelection.id}`);
    console.log(`‚úÖ Entrevista v√°lida do Daniel: ${latestDanielInterview ? latestDanielInterview.id : 'Nenhuma'}`);
    console.log(`‚úÖ Respostas v√°lidas: ${validResponsesCount.length}`);
    console.log(`üóëÔ∏è Entrevistas antigas deletadas: ${oldDanielInterviews.length}`);
    console.log(`üóëÔ∏è Entrevistas incorretas deletadas: ${wrongInterviews.length}`);
    console.log(`üóëÔ∏è Respostas √≥rf√£s deletadas: ${orphanResponses.length}`);
    
    if (validResponsesCount.length > 0) {
      console.log('\nüí¨ RESPOSTAS V√ÅLIDAS DO DANIEL:');
      validResponsesCount.forEach((response, index) => {
        console.log(`   ${index + 1}. ${response.transcription || 'Sem transcri√ß√£o'}`);
        console.log(`      √Åudio: ${response.audioUrl || 'Sem √°udio'}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar dados:', error);
  }
}

limparDadosIncorretos();