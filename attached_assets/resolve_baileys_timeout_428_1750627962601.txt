Guia de correção – TIMEOUT uploadPreKeys (408) + “Connection Terminated by Server” 428
=====================================================================

Causa provável
--------------
Replit mata WebSockets longos ou bloqueia o handshake TLS com o domínio
`web.whatsapp.com` → o uploadPreKeys (cerca de 40 KB de chaves) nunca chega
ao servidor; após 120 s o Baileys lança *Timed Out* (408) e o WhatsApp
encerra a sessão (428).

Soluções rápidas
----------------
### 1. Teste de conectividade fora do Replit
Execute o mesmo script localmente ou em VPS (DigitalOcean/Linode).  
Se funcionar, o problema é a rede Replit → vá direto à **Solução B**.

### 2. Ajuste de tempo‑limite (paliativo)
```ts
defaultQueryTimeoutMs: 180000,   // 3 min
connectTimeoutMs: 180000,
```
Se o upload concluir < 3 min, funciona; caso contrário você precisa proxy.

Solução A – Proxy HTTP/S de saída
---------------------------------
1. Instale **https-proxy-agent**  
   ```bash
   npm i https-proxy-agent
   ```
2. Crie *proxy.js*:
   ```ts
   import makeWASocket from '@whiskeysockets/baileys'
   import { HttpsProxyAgent } from 'https-proxy-agent'

   const proxy = new HttpsProxyAgent('http://proxy.ipify.org:3128')  // troque
   const sock = makeWASocket({
     version,
     auth: state,
     fetchOptions: { agent: proxy },
     connectOptions: { agent: proxy },
     keepAliveIntervalMs: 15000,
     // restante da configuração…
   })
   ```
3. Use um proxy público ou o seu VPS.  
   **Observação**: proxies gratuitos costumam ser instáveis; prefira
   BrightData/SmartProxy ou uma instância Squid própria.

Solução B – Mover o serviço
---------------------------
1. **Docker** em VPS:
   ```bash
   docker run -d --name evolution-api -p 8080:8080      -e AUTHENTICATION_API_KEY=MINHA_CHAVE      -v evolution_store:/evolution/store      -v evolution_instances:/evolution/instances      atendai/evolution-api:latest
   ```
2. Copie seu código Node (ou use a própria Evolution API) e invoque via HTTPS
   em vez de rodar Baileys dentro do Replit.

Solução C – “mobile” WebSocket (usa endpoint de menor tráfego)
--------------------------------------------------------------
```ts
const sock = makeWASocket({
  version,
  auth: state,
  mobile: true,          // <‑‑ adiciona esta linha
  fireInitQueries: true, // envia init queries logo após abrir
  keepAliveIntervalMs: 15000,
  // demais opções iguais…
})
```
`mobile: true` troca o host‐alvo para *mmg.whatsapp.net*; alguns firewalls
(Ex.: Replit) não bloqueiam.

Boas práticas adicionais
------------------------
* Após cada `connection.update` com `connection:"close"`, cheque
  `statusCode`:
  ```ts
  if (code === 408 || code === 428) setTimeout(initSocket, 5000)
  ```
* Garanta `sock.ev.on('creds.update', saveCreds)` para não perder login.
* Não rode mais de **1 instância** do mesmo número em paralelo.

Resumo
------
1. **Teste fora do Replit** – se funcionar ➜ rede bloqueada.  
2. **Aplique proxy HTTPS** ou `mobile:true` para contornar.  
3. Se nada resolver, migre a execução para VPS ou container Docker. 
