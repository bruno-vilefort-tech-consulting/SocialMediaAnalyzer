# Plano de ação – corrigir erro 515 “Stream Errored (restart required)” no Replit

> Objetivo: manter a sessão WhatsApp estável após isNewLogin=true,
> evitando fechamento imediato do stream.

============================================================
1. Alinhar versão e user‑agent
------------------------------------------------------------
```ts
import { fetchLatestBaileysVersion } from '@whiskeysockets/baileys'
const { version } = await fetchLatestBaileysVersion({ cache: true })

// Fallback em caso de firewall
const safeVersion = version ?? [2, 2419, 6]
```
Use browser Android real:
```ts
browser: ['Samsung', 'SM‑G991B', '13'],
```

============================================================
2. Ativar modo mobile + init queries
------------------------------------------------------------
```ts
mobile: true,          // troca host para mmg.whatsapp.net (porta 443)
fireInitQueries: true, // manda consultas logo após “open”
```

============================================================
3. Diminuir timeouts e pings
------------------------------------------------------------
Replit derruba sockets com 60‑90 s de ociosidade.  
Configuração recomendada:
```ts
keepAliveIntervalMs: 10000,     // envia ping cada 10 s
networkIdleTimeoutMs: 45000,    // considera inativo só >45 s
connectTimeoutMs: 60000,
defaultQueryTimeoutMs: 60000,
```

============================================================
4. Implementar proxy HTTPS opcional
------------------------------------------------------------
```ts
import { HttpsProxyAgent } from 'https-proxy-agent'
const agent = new HttpsProxyAgent('https://proxy.replit.com:443') // ou seu proxy
fetchOptions: { agent },
connectOptions: { agent },
```
Caso não tenha proxy, deixe sem **agent**.

============================================================
5. Persistir credenciais e evitar múltiplos sockets
------------------------------------------------------------
```ts
import { useSingleFileAuthState } from '@whiskeysockets/baileys'
const { state, saveState } = await useSingleFileAuthState('./auth.json')
sock.ev.on('creds.update', saveState)
```
Somente **uma** instância por número simultaneamente.

============================================================
6. Reconexão controlada
------------------------------------------------------------
```ts
import { Boom } from '@hapi/boom'
import { DisconnectReason } from '@whiskeysockets/baileys'

sock.ev.on('connection.update', async ({ connection, lastDisconnect }) => {
  if (connection === 'close') {
    const code = (lastDisconnect?.error as Boom | undefined)?.output?.statusCode
    const transient = [DisconnectReason.connectionClosed, 408, 428, 515]
    if (transient.includes(code ?? 0)) {
      console.warn('Reconectando em 5 s…', code)
      setTimeout(initSocket, 5000)
    } else {
      console.log('Logout permanente:', code)
    }
  }
})
```

============================================================
7. Teste fora do Replit
------------------------------------------------------------
• Execute localmente: se não houver 515, o problema é de rede.  
• VPS (DigitalOcean 1 GB) normalmente funciona sem ajustes extras.

============================================================
8. Checklist final
------------------------------------------------------------
[ ] Versão WA obtida e browser Android definido  
[ ] `mobile:true` + `fireInitQueries:true` habilitados  
[ ] keep‑alive 10 s / idle 45 s  
[ ] Credenciais persistidas (.json)  
[ ] Apenas 1 socket por número  
[ ] Reconexão só para códigos transitórios  
[ ] (Opcional) proxy HTTPS configurado  
