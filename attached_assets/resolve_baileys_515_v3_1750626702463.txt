Guia de correção – erro 515 “Stream Errored (restart required)” logo após isNewLogin=true (Baileys)

============================================================
VISÃO GERAL
------------------------------------------------------------
• O QR Code é lido e as credenciais são gravadas, mas o handshake WebSocket com os
  servidores WhatsApp cai imediatamente com stream:error 515.
• Esse código costuma indicar versão de protocolo fora de sincronismo OU conexão
  WebSocket cortada pelo host (Replit costuma fechar sockets long‑lived).
• O timeout subsequente no uploadPreKeys confirma que os pacotes não chegam
  ao servidor.

============================================================
PASSO A PASSO DE CORREÇÃO
------------------------------------------------------------
1. **Use a versão exata do Web WhatsApp**
   Baileys precisa conversar no mesmo “vers” que o Web WhatsApp oficial.
   Adicione logo antes de criar o socket:

   ```ts
   import makeWASocket, { fetchLatestBaileysVersion } from '@whiskeysockets/baileys'

   const { version, isLatest } = await fetchLatestBaileysVersion()
   console.log('Versão WAWeb      :', version, 'isLatest?', isLatest)

   const sock = makeWASocket({
     version,                 // 👈 alinha o protocolo
     auth: state,
     // ... resto das opções
   })
   ```

2. **Salve credenciais a cada atualização**
   Desligamentos abruptos podem corromper o par de chaves.
   ```ts
   sock.ev.on('creds.update', saveState)
   ```

3. **Aumente keep‑alive e habilite ping interno**
   Replit tende a derrubar sockets ociosos depois de 30–60 s.
   ```ts
   keepAliveIntervalMs: 15000,      // ping a cada 15 s
   networkIdleTimeoutMs: 60000,     // considera inativo só após 60 s
   ```

4. **Desative ‘fireInitQueries’ na primeira conexão**
   Alguns aparelhos/dispositivos devolvem 515 se recebem init‑queries muito cedo.
   Continue com `fireInitQueries: false` e só dispare manualmente após ‘open’:

   ```ts
   sock.ev.on('connection.update', ({ connection }) => {
     if (connection === 'open') {
       sock.sendPresenceUpdate('available')
     }
   })
   ```

5. **Re‑tente automaticamente quando statusCode === 515**
   ```ts
   sock.ev.on('connection.update', ({ connection, lastDisconnect }) => {
     const code = (lastDisconnect?.error as any)?.output?.statusCode
     if (connection === 'close' && code === 515) {
       console.warn('Erro 515: reiniciando socket...')
       restartSocketAfterDelay(5000)
     }
   })
   ```

6. **Teste fora do Replit**
   Para eliminar dúvida de rede, execute localmente ou num VPS (DigitalOcean/Linode).
   Se funcionar fora do Replit, a causa é a limitação de WebSockets longa duração
   da própria plataforma.

7. **Habilite proxy HTTP/HTTPS (opcional)**
   Se a rede do Replit bloqueia as portas 443/HTTPS para websocket‑upgrade,
   configure um proxy de saída:
   ```ts
   const sock = makeWASocket({
     proxyAgent: new HttpsProxyAgent('http://proxyhost:3128'),
     // ...
   })
   ```

8. **Atualize Baileys e Node**
   ```
   npm i @whiskeysockets/baileys@latest
   npx npm-check-updates -u
   npm install
   ```

============================================================
RESUMO DE CÓDIGO AJUSTADO
------------------------------------------------------------
```ts
import makeWASocket, {
  fetchLatestBaileysVersion,
  useMultiFileAuthState
} from '@whiskeysockets/baileys'

async function initSocket () {
  const { state, saveCreds } = await useMultiFileAuthState('auth')
  const { version } = await fetchLatestBaileysVersion()

  const sock = makeWASocket({
    version,
    auth: state,
    logger,
    browser: ['Replit‑Bot', 'Chrome', '1.0.0'],
    connectTimeoutMs: 120000,
    defaultQueryTimeoutMs: 120000,
    keepAliveIntervalMs: 15000,
    networkIdleTimeoutMs: 60000,
    qrTimeout: 180000,
    fireInitQueries: false,
    shouldIgnoreJid: jid => jid.includes('@newsletter')
  })

  sock.ev.on('creds.update', saveCreds)

  sock.ev.on('connection.update', ({ connection, lastDisconnect, isNewLogin }) => {
    if (connection === 'open') {
      console.log('🟢 Conectado!')
    }
    if (connection === 'close') {
      const code = (lastDisconnect?.error as any)?.output?.statusCode
      if (code === 515) {
        console.warn('515 recebido – reiniciando em 5 s…')
        setTimeout(initSocket, 5000)
      }
    }
    if (isNewLogin) console.log('Novo login detectado ✅')
  })
}

initSocket()
```

Salve este arquivo como **resolve_baileys_515_v3.txt** e envie para o Replit.
