
==============================================
PASSO A PASSO • AJUSTE DA CONEXÃO WHATSAPP (BAILEYS)
==============================================

OBJETIVO
--------
• Exibir QR Code em /configuracoes  
• Conectar via Baileys, manter sessão viva  
• Menu de teste — campo celular + mensagem + botão ENVIAR  
• Não alterar o restante do sistema; apenas arquivos de conexão WhatsApp e o esquema do BD onde necessário  

REFERÊNCIA  
----------
Baileys GitHub → https://github.com/WhiskeySockets/Baileys

ETAPAS
------

1. DEPENDÊNCIAS
---------------
```bash
npm install @whiskeysockets/baileys@latest qrcode express cors
```

2. ESTRUTURA DE ARQUIVOS
------------------------
```
src/
 └─ services/
     └─ whatsappService.js   ← **Novo / atualizado**
src/
 └─ routes/
     └─ configuracoes.js     ← **Novo endpoint Front/Back**
```

3. whatsappService.js
---------------------
```js
const { default: makeWASocket, useMultiFileAuthState } = require('@whiskeysockets/baileys')
const qrcode = require('qrcode')
let currentQR = '', sock = null

async function initWhatsApp() {
  const { state, saveCreds } = await useMultiFileAuthState('auth_info')
  sock = makeWASocket({ auth: state, printQRInTerminal: false })

  sock.ev.on('connection.update', async ({ connection, qr }) => {
    if (qr) currentQR = await qrcode.toDataURL(qr)
    if (connection === 'open') console.log('✅ WA conectado')
    if (connection === 'close') setTimeout(initWhatsApp, 2000) // reconecta
  })
  sock.ev.on('creds.update', saveCreds)

  // keep‑alive a cada 25 s
  setInterval(() => sock?.sendPresenceUpdate?.('available'), 25000)
}

function getQR() { return currentQR }
function isConnected() { return !!sock?.user }
async function sendMessage(phone, text) {
  if (!isConnected()) throw new Error('WA não conectado')
  return sock.sendMessage(`${phone}@s.whatsapp.net`, { text })
}

module.exports = { initWhatsApp, getQR, isConnected, sendMessage }
```

4. configuracoes.js (rota Express)
----------------------------------
```js
const express = require('express')
const router = express.Router()
const { getQR, isConnected, sendMessage } = require('../services/whatsappService')

router.use(express.urlencoded({ extended: false }))

router.get('/configuracoes', (_, res) => {
  if (!isConnected()) {
    return res.send(`<h2>Escaneie o QR:</h2><img src="${getQR() || ''}">`)
  }
  return res.send(`
    <h2>WhatsApp Conectado</h2>
    <form method="post" action="/configuracoes/enviar">
      <input name="phone" placeholder="55DDDNÚMERO" required /><br/>
      <textarea name="msg" placeholder="Mensagem" rows="3"></textarea><br/>
      <button type="submit">ENVIAR</button>
    </form>
  `)
})

router.post('/configuracoes/enviar', async (req, res) => {
  try {
    await sendMessage(req.body.phone, req.body.msg)
    res.send('✅ Mensagem enviada!')
  } catch (e) {
    res.send('Erro: ' + e.message)
  }
})

module.exports = router
```

5. APP PRINCIPAL
----------------
```js
const express = require('express')
const cors = require('cors')
const { initWhatsApp } = require('./src/services/whatsappService')

const app = express()
app.use(cors())

// iniciar WhatsApp
initWhatsApp()

// rotas
app.use(require('./src/routes/configuracoes'))

app.listen(process.env.PORT || 3000, () =>
  console.log('Servidor rodando...')
)
```

6. MANTER SESSÃO / RECONEXÃO
----------------------------
• Pasta `auth_info/` **não** deve ser apagada em deploys  
• Reconectar chamando `initWhatsApp()` se `connection === 'close'`  

7. BANCO DE DADOS
-----------------
• Nova coleção Firestore opcional: `test_messages`  
• Campos: `{ phone, message, timestamp }`  
(Não alterar outras coleções.)

8. TESTE FINAL
--------------
• Deploy ➜ acessar `/configuracoes`  
• Escanear QR, aguardar "WA conectado"  
• Enviar teste via formulário — verificar entrega no celular e (opcional) entrada em `test_messages`.

Pronto! Isso resolve exibição do QR, mantém conexão ativa e permite teste de envio sem quebrar o restante do sistema.
