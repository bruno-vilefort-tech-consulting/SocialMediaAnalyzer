============================================================
1. AMBIENTE REPLIT.NIX
------------------------------------------------------------
Abra `replit.nix` e garanta:
{ pkgs }: {
  deps = [
    pkgs.nodejs_20
    pkgs.ffmpeg         # necessário para Baileys áudio
    pkgs.openssl        # suporte TLS/SSL estável
  ];
}

============================================================
2. SCRIPTS NO package.json
------------------------------------------------------------
No `package.json`, confirme:
"scripts": {
  "dev": "ts-node-dev --respawn --exit-child --transpile-only src/main.ts",
  "build": "rimraf dist && tsc",
  "start": "node dist/main.js",
  "prisma:generate": "prisma generate",
  "prisma:migrate": "prisma migrate deploy"
}

============================================================
3. VARIÁVEIS DE AMBIENTE (Secrets)
------------------------------------------------------------
Configure em Replit Secrets:
PORT=3000
NODE_ENV=development

# Evolution API externa (VPS)
EVOLUTION_API_URL=https://wa-evolution.<dominio>.com
EVOLUTION_API_KEY=<sua-chave-secreta>

# Banco Supabase/PostgreSQL
DATABASE_URL=postgres://USU:PASS@HOST:PORT/db?schema=public

# Firebase (se usar)
FIREBASE_PROJECT_ID=<...>
FIREBASE_CLIENT_EMAIL=<...>
FIREBASE_PRIVATE_KEY=<...>

# Pasta de sessão WhatsApp
WHATSAPP_SESSION_PATH=/whatsapp-sessions

============================================================
4. INSTALAR DEPENDÊNCIAS
------------------------------------------------------------
No Shell:
npm install
npm install @whiskeysockets/baileys qrcode https-proxy-agent prisma ts-node-dev typescript rimraf @types/node

============================================================
5. TYPE SCRIPT – tsconfig.json
------------------------------------------------------------
```jsonc
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "CommonJS",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "outDir": "dist",
    "rootDir": "src"
  },
  "include": ["src/**/*"]
}
```

============================================================
6. CORRIGIR SINTAXE clientWhatsAppService.ts
------------------------------------------------------------
- Ajuste `try/catch`:
```ts
try {
  await uploadPreKeys()
} catch (err) {
  console.error('uploadPreKeys falhou:', err)
}
```
- Sempre feche chaves corretamente antes do `catch`.
- Use `async ({ connection, lastDisconnect, qr }) => { ... }` para listeners.

============================================================
7. CONFIGURAÇÃO SOCKET BAILEYS
------------------------------------------------------------
No arquivo de serviço Baileys:
```ts
import makeWASocket, {
  fetchLatestBaileysVersion,
  useSingleFileAuthState,
  DisconnectReason
} from '@whiskeysockets/baileys'
import { HttpsProxyAgent } from 'https-proxy-agent'

async function initSocket(clientId) {
  // 1. Autenticação persistente
  const { state, saveCreds } = await useSingleFileAuthState(
    `${process.env.WHATSAPP_SESSION_PATH}/${clientId}`
  )
  // 2. Versão WAWeb
  let version: number[]
  try {
    const fetched = await fetchLatestBaileysVersion({ cache: true })
    version = fetched.version
  } catch {
    version = [2, 2419, 6] // fallback seguro
  }
  // 3. Proxy opcional para Replit
  const agent = new HttpsProxyAgent('https://proxy.replit.com:443')

  const sock = makeWASocket({
    version,
    auth: state,
    browser: ['Samsung', 'SM-G991B', '13'],
    mobile: true,
    printQRInTerminal: false,
    logger: { level: 'error' },
    fetchOptions: { agent },
    connectOptions: { agent },
    connectTimeoutMs: 60000,
    defaultQueryTimeoutMs: 60000,
    keepAliveIntervalMs: 10000,
    networkIdleTimeoutMs: 45000,
    qrTimeout: 90000,
    fireInitQueries: true,
    syncFullHistory: false
  })

  // 4. Salvar credenciais
  sock.ev.on('creds.update', saveCreds)

  // 5. Evento connection.update
  sock.ev.on('connection.update', async (update) => {
    const { connection, lastDisconnect, qr, isNewLogin } = update
    console.log('connection.update', update)
    if (qr) {
      // Enviar QR ao frontend / DB
      await saveQrToDb(clientId, qr)
    }
    if (connection === 'open') {
      console.log('Conectado WhatsApp!')
      await markConnected(clientId, true)
    }
    if (connection === 'close') {
      const code = (lastDisconnect?.error as any)?.output?.statusCode
      const transient = [DisconnectReason.connectionClosed, 408, 428, 515]
      if (transient.includes(code)) {
        console.warn('Reconectando em 5s (code ' + code + ')')
        setTimeout(() => initSocket(clientId), 5000)
      } else {
        console.error('Logout permanente (code ' + code + ')')
        await markConnected(clientId, false)
      }
    }
    if (isNewLogin) {
      console.log('Novo login detectado:', clientId)
    }
  })

  return sock
}
export default initSocket
```

============================================================
8. EVOLUTION API NO REPLIT (modo local)
------------------------------------------------------------
Se optar por rodar Evolution API no Replit (não recomendado):
- Siga `evolution_api_replit_setup.txt` passo a passo.
- Prefira usar VPS externo para mais estabilidade.

============================================================
9. PRISMA MIGRATIONS
------------------------------------------------------------
No Shell, execute:
```
npx prisma generate
npx prisma migrate deploy
```

============================================================
10. STARTUP REPLIT
------------------------------------------------------------
- `.replit`: 
  ```
  run = "npm run dev"
  ```
- Ajuste `.env` conforme Secrets.
- Clique *Restart Repl*.

============================================================
11. TESTES FINAIS
------------------------------------------------------------
1. Crie instância: 
   ```bash
   curl -X POST https://<seu-repl>.repl.co/instance \
     -H "Authorization: Bearer $EVOLUTION_API_KEY" \
     -H "Content-Type: application/json" \
     -d '{"name":"meuZap"}'
   ```
2. Escaneie QR:
   ```
   https://<seu-repl>.repl.co/instance/<id>/qr?token=<token>
   ```
3. Envie mensagem:
   ```bash
   curl -X POST https://<seu-repl>.repl.co/message \
     -H "Authorization: Bearer $EVOLUTION_API_KEY" \
     -H "Content-Type: application/json" \
     -d '{"instance_id":"<id>","number":"5511984316526","message":"Olá"}'
   ```

============================================================
✅ Com estas correções, seu Repl deve rodar a Evolution API e o cliente Baileys
   sem erros de sintaxe, rede ou stream-error 515.
