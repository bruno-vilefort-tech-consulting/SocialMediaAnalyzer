
==========================================
Evolution API + Replit • Guia Completo
==========================================

Objetivo
--------
• Executar a **Evolution API** (servidor WhatsApp) em seu próprio host (Docker).
• Usar o **Replit (Node.js)** como cliente para:
  1. **Conectar**‐se a uma instância existente (instanceId já gerado).
  2. Exibir o **QR‑Code** de pareamento.
  3. Disponibilizar uma **“caixinha”** para enviar mensagem‑teste e confirmar a conexão.
• Sem alterar ou danificar seu banco Mongo já utilizado por outros sistemas.

Links oficiais
--------------
• GitHub: <https://github.com/EvolutionAPI/evolution-api>  
• Docs / Introdução: <https://doc.evolution-api.com/v1/pt/get-started/introduction>

----------------------------------------------------------------
1. Subir a Evolution API no seu servidor (Docker standalone)
----------------------------------------------------------------
```bash
# Crie volumes para persistir sessões
docker volume create evolution_store
docker volume create evolution_instances

# Rode o container
docker run -d \
  --name evolution-api \
  -p 8080:8080 \
  -e AUTHENTICATION_API_KEY=SUA_API_KEY \
  -v evolution_store:/evolution/store \
  -v evolution_instances:/evolution/instances \
  atendai/evolution-api:latest
```
> A URL pública (utilizaremos no Replit) será algo como  
> `https://api.seudominio.com` apontando para a porta 8080.

----------------------------------------------------------------
2. Criar / localizar sua instância WhatsApp
----------------------------------------------------------------
**Opção A – Instância nova**

```bash
curl -X POST \
  -H "apikey: SUA_API_KEY" \
  https://api.seudominio.com/v1/instance/create
```
Resposta:
```json
{ "id": "abcdef-1234", ... }
```

**Opção B – Usar instanceId existente**  
Basta guardar o *id* que você já criou anteriormente.

----------------------------------------------------------------
3. Preparar o Replit (cliente Node.js)
----------------------------------------------------------------
a) Crie um Replit “Node.js”.  
b) Adicione no painel **Secrets** (.env):

```
EVOLUTION_API_URL=https://api.seudominio.com/v1
EVOLUTION_API_KEY=SUA_API_KEY
EVOLUTION_INSTANCE_ID=abcdef-1234        # instanceId existente
```
> Nenhuma variável de banco existente será alterada.  
> Caso deseje registrar logs no Mongo, use campos e coleções ~~novas~~.

c) Instale dependências:
```bash
npm install express node-fetch@3 dotenv
```

----------------------------------------------------------------
4. Código – server.js
----------------------------------------------------------------
```js
import express from 'express';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();

const { EVOLUTION_API_URL, EVOLUTION_API_KEY, EVOLUTION_INSTANCE_ID } = process.env;
const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

/** -------- 1. Rota para gerar / renovar QR ‐ Code -------- */
app.get('/connect', async (_req, res) => {
  try {
    const api = `${EVOLUTION_API_URL}/instance/connect/${EVOLUTION_INSTANCE_ID}`;
    const r = await fetch(api, { headers: { apikey: EVOLUTION_API_KEY } });

    if (!r.ok) {
      const txt = await r.text();
      return res.status(500).send(`Falha na conexão: ${txt}`);
    }
    const data = await r.json();

    /* Página simples com QR + caixinha */
    res.send(`
      <h2>Escaneie o QR‑Code abaixo:</h2>
      <pre>${data.pairingCode}</pre>
      <h3>Enviar mensagem‑teste</h3>
      <form method="post" action="/send">
        <input type="text" name="number" placeholder="5599998888777" required/><br/>
        <input type="text" name="text"   placeholder="Olá, conexão OK!" required/><br/>
        <button>Enviar</button>
      </form>
    `);
  } catch (e) {
    res.status(500).send(e.toString());
  }
});

/** -------- 2. Rota POST /send para teste de envio -------- */
app.post('/send', async (req, res) => {
  const { number, text } = req.body;
  if (!number || !text) return res.status(400).send('Número e texto obrigatórios.');

  try {
    const api = `${EVOLUTION_API_URL}/message/sendText/${EVOLUTION_INSTANCE_ID}`;
    const body = { number, message: text };
    const r = await fetch(api, {
      method: 'POST',
      headers: {
        'apikey': EVOLUTION_API_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    });
    const data = await r.json();
    return res.send(`<pre>${JSON.stringify(data, null, 2)}</pre>`);
  } catch (e) {
    res.status(500).send(e.toString());
  }
});

/** -------- 3. Home -------- */
app.get('/', (_q, res) => res.send(`
  <h1>WhatsApp – Evolution API</h1>
  <p><a href="/connect">Conectar / Renovar QR</a></p>
`));

/** -------- 4. Start server -------- */
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log('Replit app no ar, porta', PORT));
```

----------------------------------------------------------------
5. Executar e testar
----------------------------------------------------------------
```bash
node server.js
```
• Abra a URL do Replit → `/connect`  
• Escaneie o QR com o WhatsApp  
• Digite um número +55DDDNÚMERO e um texto → clique **Enviar**  
• Se a API responder `{status:true}` sua conexão está OK.

----------------------------------------------------------------
6. Boas práticas (não quebrar banco)
----------------------------------------------------------------
✓ Este script **não realiza** operações de `drop`, `updateMany` globais ou `deleteMany`.  
✓ Caso registre logs no Mongo, use uma **nova coleção** (ex.: `evolution_logs`).  
✓ Envolva cada insert em `try/catch`.  
✓ Faça backup dos volumes Docker (`evolution_store`, `evolution_instances`) antes de atualizações.

----------------------------------------------------------------
7. Referências rápidas da API
----------------------------------------------------------------
• **GET /instance/connect/{id}** – gera QR ou verifica status.  
• **POST /message/sendText/{id}** – envia texto. Body: `{ "number":"...", "message":"..." }`  
• **GET /webhook/find/{id}** – exibe webhook ativo.  
Para mais endpoints consulte <https://doc.evolution-api.com>.

Pronto! Cole este arquivo no Replit, siga cada passo e você terá:
▪ Conexão WhatsApp funcionando  
▪ Botão de teste de envio de mensagem  
▪ Proteção contra alterações destrutivas no banco.

