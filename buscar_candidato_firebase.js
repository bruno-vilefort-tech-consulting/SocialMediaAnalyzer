import admin from 'firebase-admin';

// Configurar Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.applicationDefault(),
  });
}

const db = admin.firestore();

async function buscarCandidatoPorNumero(numero) {
  console.log(`üîç Buscando candidatos com n√∫mero: ${numero}`);
  
  try {
    // Buscar por WhatsApp exato
    const snapshot1 = await db.collection('candidates')
      .where('whatsapp', '==', numero)
      .get();
    
    console.log(`üìã Busca exata por whatsapp: ${snapshot1.size} candidatos encontrados`);
    
    // Buscar todos os candidatos e filtrar por n√∫meros similares
    const allCandidates = await db.collection('candidates').get();
    console.log(`üìä Total de candidatos no Firebase: ${allCandidates.size}`);
    
    const matchingCandidates = [];
    
    allCandidates.forEach(doc => {
      const data = doc.data();
      const candidatePhone = data.whatsapp || '';
      
      // Remover caracteres n√£o num√©ricos para compara√ß√£o
      const cleanCandidatePhone = candidatePhone.replace(/\D/g, '');
      const cleanSearchPhone = numero.replace(/\D/g, '');
      
      // Verificar se h√° correspond√™ncia
      if (cleanCandidatePhone.includes(cleanSearchPhone) || 
          cleanSearchPhone.includes(cleanCandidatePhone)) {
        matchingCandidates.push({
          id: doc.id,
          ...data
        });
      }
    });
    
    console.log(`\nüéØ RESULTADOS DA BUSCA:`);
    console.log(`üì± N√∫mero pesquisado: ${numero}`);
    console.log(`üî¢ Candidatos encontrados: ${matchingCandidates.length}`);
    
    if (matchingCandidates.length > 0) {
      console.log(`\nüìã CANDIDATOS ENCONTRADOS:`);
      matchingCandidates.forEach((candidate, index) => {
        console.log(`\n${index + 1}. ${candidate.name || 'Sem nome'}`);
        console.log(`   üì± WhatsApp: ${candidate.whatsapp || 'N√£o informado'}`);
        console.log(`   üìß Email: ${candidate.email || 'N√£o informado'}`);
        console.log(`   üè¢ Cliente ID: ${candidate.clientId || 'N√£o informado'}`);
        console.log(`   üÜî ID: ${candidate.id}`);
        console.log(`   üìÖ Criado em: ${candidate.createdAt ? new Date(candidate.createdAt.seconds * 1000).toLocaleString() : 'N√£o informado'}`);
      });
    } else {
      console.log(`\n‚ùå Nenhum candidato encontrado com o n√∫mero ${numero}`);
    }
    
    // Mostrar alguns candidatos de exemplo para refer√™ncia
    console.log(`\nüìã EXEMPLOS DE CANDIDATOS NO SISTEMA:`);
    let count = 0;
    allCandidates.forEach(doc => {
      if (count < 5) {
        const data = doc.data();
        if (data.whatsapp) {
          console.log(`   ${data.name || 'Sem nome'} - ${data.whatsapp} (Cliente: ${data.clientId})`);
          count++;
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar candidatos:', error);
  }
}

// Executar busca
buscarCandidatoPorNumero('5511996612253')
  .then(() => {
    console.log('\n‚úÖ Busca conclu√≠da');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Erro na busca:', error);
    process.exit(1);
  });
