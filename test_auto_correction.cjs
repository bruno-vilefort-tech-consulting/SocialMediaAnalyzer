// Script para testar a corre√ß√£o autom√°tica de n√∫meros WhatsApp
const fetch = require('node-fetch');

// Token do usu√°rio bruno.claro@yahoo.com
const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjE3NTEzODUwNzUxNTkiLCJlbWFpbCI6ImJydW5vLmNsYXJvQHlhaG9vLmNvbSIsInJvbGUiOiJjbGllbnQiLCJjbGllbnRJZCI6MTc0OTg0OTk4NzU0MywiaWF0IjoxNzUyODE4MTE0fQ.pJ_oeHYWW2GDq8OQR6eXcxM3KlI1WKUCh6qI1FG1Gqs";

async function testAutoCorrection() {
  console.log('üß™ [TESTE] Iniciando teste de corre√ß√£o autom√°tica WhatsApp\n');

  // Testes espec√≠ficos para corre√ß√£o autom√°tica
  const testCases = [
    {
      description: "N√∫mero sem 9¬∫ d√≠gito (deve ser corrigido para formato com 9)",
      input: "551196612253",
      expected: "5511996612253",
      shouldCorrect: true
    },
    {
      description: "N√∫mero j√° correto com 9¬∫ d√≠gito",
      input: "5511996612253", 
      expected: "5511996612253",
      shouldCorrect: false
    },
    {
      description: "N√∫mero MG sem 9¬∫ d√≠gito (pode permanecer sem 9 se v√°lido)",
      input: "553187654321",
      expected: "553187654321 ou 5531987654321",
      shouldCorrect: "depends"
    }
  ];

  for (const test of testCases) {
    console.log(`üì± [TESTE] ${test.description}`);
    console.log(`   Input: ${test.input}`);
    console.log(`   Esperado: ${test.expected}`);
    
    try {
      const response = await fetch('http://localhost:5000/api/whatsapp/validate-number', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ phone: test.input })
      });
      
      const result = await response.json();
      
      if (response.ok) {
        if (result.isValid) {
          const corrected = result.validatedNumber !== test.input;
          console.log(`   ‚úÖ V√ÅLIDO: ${result.validatedNumber}`);
          console.log(`   üìä N√∫mero original: ${result.originalNumber || test.input}`);
          console.log(`   üîß Foi corrigido: ${corrected ? 'SIM' : 'N√ÉO'}`);
          
          if (corrected) {
            console.log(`   ‚ö° CORRE√á√ÉO: ${test.input} ‚Üí ${result.validatedNumber}`);
          }
          
          // Validar se corre√ß√£o atende expectativa
          if (test.shouldCorrect === true && !corrected) {
            console.log(`   ‚ö†Ô∏è ATEN√á√ÉO: Esperava corre√ß√£o mas n√£o houve`);
          } else if (test.shouldCorrect === false && corrected) {
            console.log(`   ‚ö†Ô∏è ATEN√á√ÉO: N√£o esperava corre√ß√£o mas houve`);
          }
          
        } else {
          console.log(`   ‚ùå INV√ÅLIDO: ${result.error}`);
          if (result.testedNumbers) {
            console.log(`   üîç N√∫meros testados: ${result.testedNumbers.join(', ')}`);
          }
        }
      } else {
        console.log(`   ‚ö†Ô∏è ERRO HTTP ${response.status}: ${result.error || 'Erro desconhecido'}`);
      }
      
    } catch (error) {
      console.log(`   üí• ERRO DE REDE: ${error.message}`);
    }
    
    console.log(''); // Linha em branco entre testes
  }
  
  console.log('üéâ [TESTE] Teste de corre√ß√£o autom√°tica conclu√≠do!');
  console.log('\nüìä [AN√ÅLISE] Comportamento esperado:');
  console.log('   ‚úì N√∫meros sem 9¬∫ d√≠gito ‚Üí Testados COM e SEM 9¬∫ d√≠gito');
  console.log('   ‚úì Primeiro n√∫mero v√°lido encontrado ‚Üí Retornado como correto');
  console.log('   ‚úì Frontend mostra notifica√ß√£o: "N√∫mero corrigido automaticamente!"');
  console.log('   ‚úì Banco de dados salva n√∫mero VALIDADO, n√£o o original digitado');
}

// Executar teste
testAutoCorrection().catch(console.error);