import { initializeApp } from 'firebase/app';
import { getFirestore, collection, doc, setDoc, deleteDoc, getDocs } from 'firebase/firestore';

// Configura√ß√£o do Firebase
const firebaseConfig = {
  apiKey: process.env.VITE_FIREBASE_API_KEY,
  authDomain: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,
  projectId: process.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,
  appId: process.env.VITE_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function consolidarConfigs() {
  try {
    console.log('üîß Consolidando configura√ß√µes duplicadas...');
    
    // Buscar dados das cole√ß√µes duplicadas
    const configSnapshot = await getDocs(collection(db, 'config'));
    const configsSnapshot = await getDocs(collection(db, 'configs'));
    
    let configData = {};
    let configsData = {};
    
    // Extrair dados da cole√ß√£o "config"
    configSnapshot.forEach(doc => {
      console.log(`üìÑ Dados de 'config' (ID: ${doc.id}):`, doc.data());
      configData = { ...configData, ...doc.data() };
    });
    
    // Extrair dados da cole√ß√£o "configs"
    configsSnapshot.forEach(doc => {
      console.log(`üìÑ Dados de 'configs' (ID: ${doc.id}):`, doc.data());
      configsData = { ...configsData, ...doc.data() };
    });
    
    // Consolidar todos os dados
    const dadosConsolidados = {
      id: 1,
      openaiApiKey: configsData.openaiApiKey || configData.openaiApiKey || null,
      openaiModel: configsData.openaiModel || configData.openaiModel || 'gpt-4o',
      firebaseProjectId: configsData.firebaseProjectId || configData.firebaseProjectId || null,
      firebaseServiceAccount: configsData.firebaseServiceAccount || configData.firebaseServiceAccount || null,
      whatsappQrConnected: configData.whatsappQrConnected || configsData.whatsappQrConnected || true,
      whatsappQrPhoneNumber: configData.whatsappQrPhoneNumber || configsData.whatsappQrPhoneNumber || null,
      whatsappQrLastConnection: configData.whatsappQrLastConnection || configsData.whatsappQrLastConnection || null,
      updatedAt: new Date()
    };
    
    console.log('üìä Dados consolidados:', dadosConsolidados);
    
    // Salvar na cole√ß√£o correta 'apiConfigs'
    console.log('üíæ Salvando dados consolidados em apiConfigs...');
    await setDoc(doc(db, 'apiConfigs', '1'), dadosConsolidados);
    console.log('‚úÖ Configura√ß√µes salvas na cole√ß√£o apiConfigs');
    
    // Deletar cole√ß√µes duplicadas
    console.log('üóëÔ∏è Removendo cole√ß√µes duplicadas...');
    
    // Deletar documentos de 'config'
    for (const documento of configSnapshot.docs) {
      await deleteDoc(doc(db, 'config', documento.id));
      console.log(`‚úÖ Deletado: config/${documento.id}`);
    }
    
    // Deletar documentos de 'configs'
    for (const documento of configsSnapshot.docs) {
      await deleteDoc(doc(db, 'configs', documento.id));
      console.log(`‚úÖ Deletado: configs/${documento.id}`);
    }
    
    console.log('üéâ Consolida√ß√£o conclu√≠da! Agora existe apenas a cole√ß√£o apiConfigs.');
    
    // Verificar resultado final
    const apiConfigsSnapshot = await getDocs(collection(db, 'apiConfigs'));
    console.log(`üìä Resultado: apiConfigs cont√©m ${apiConfigsSnapshot.size} documento(s)`);
    
  } catch (error) {
    console.error('‚ùå Erro ao consolidar configura√ß√µes:', error);
  }
}

consolidarConfigs();