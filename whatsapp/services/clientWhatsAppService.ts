import { storage } from '../../server/storage';
import { evolutionApiService } from './evolutionApiService';
import { wppConnectService } from './wppConnectService';
import { enhancedConnectionService } from './enhancedConnectionService';

interface WhatsAppClientConfig {
  isConnected: boolean;
  qrCode: string | null;
  phoneNumber: string | null;
  lastConnection: Date | null;
  clientId: string;
  instanceId?: string;
}

class ClientWhatsAppService {
  constructor() {
    console.log('‚úÖ [CLIENT-WA] Multi-service WhatsApp manager inicializado');
  }

  async getConnectionStatus(clientId: string): Promise<WhatsAppClientConfig> {
    try {
      console.log(`üîç [CLIENT-WA] Verificando conex√£o usando Enhanced Service para cliente ${clientId}`);
      
      // Usar Enhanced Connection Service como m√©todo prim√°rio
      const enhancedStatus = await enhancedConnectionService.detectConnection(clientId);
      
      if (enhancedStatus.isConnected) {
        console.log(`‚úÖ [CLIENT-WA] Enhanced Service detectou conex√£o ativa via ${enhancedStatus.service}: ${enhancedStatus.phoneNumber}`);
        return {
          isConnected: true,
          qrCode: null, // N√£o mostrar QR quando conectado
          phoneNumber: enhancedStatus.phoneNumber || null,
          lastConnection: enhancedStatus.lastConnection || new Date(),
          clientId,
          instanceId: enhancedStatus.instanceId || `client_${clientId}`
        };
      }

      // Se Enhanced Service n√£o detectou conex√£o, usar fallback direto para Evolution API
      console.log(`üîÑ [CLIENT-WA] Enhanced Service n√£o detectou conex√£o, tentando Evolution API diretamente`);
      
      try {
        const evolutionStatus = await evolutionApiService.getConnectionStatus(clientId);
        console.log(`üì± [Evolution] Status:`, {
          isConnected: evolutionStatus.isConnected,
          hasQrCode: !!evolutionStatus.qrCode,
          instanceId: evolutionStatus.instanceId
        });

        // Retornar resultado com QR Code se dispon√≠vel
        return {
          isConnected: evolutionStatus.isConnected,
          qrCode: evolutionStatus.qrCode || enhancedStatus.qrCode || null,
          phoneNumber: evolutionStatus.phoneNumber || null,
          lastConnection: evolutionStatus.lastConnection || null,
          clientId,
          instanceId: evolutionStatus.instanceId || `client_${clientId}`
        };
        
      } catch (evoError) {
        console.log(`‚ö†Ô∏è [Evolution] Erro na verifica√ß√£o:`, evoError);
      }

      // Se todos os m√©todos falharam, retornar status desconectado
      console.log(`‚ùå [CLIENT-WA] Nenhuma conex√£o detectada pelos m√©todos dispon√≠veis`);
      
      return {
        isConnected: false,
        qrCode: enhancedStatus.qrCode || null,
        phoneNumber: null,
        lastConnection: null,
        clientId,
        instanceId: `client_${clientId}`
      };
      
    } catch (error) {
      console.error(`‚ùå [CLIENT-WA] Erro geral ao verificar status:`, error);
      return {
        isConnected: false,
        qrCode: null,
        phoneNumber: null,
        lastConnection: null,
        clientId
      };
    }
  }

  async connectClient(clientId: string): Promise<{ success: boolean; qrCode?: string; message?: string }> {
    try {
      console.log(`üîó [CLIENT-WA] Iniciando conex√£o multi-servi√ßo para cliente ${clientId}`);
      
      // Primeiro, verificar se j√° existe conex√£o ativa
      const currentStatus = await this.getConnectionStatus(clientId);
      if (currentStatus.isConnected) {
        console.log(`‚úÖ [CLIENT-WA] Conex√£o j√° ativa detectada para ${clientId}: ${currentStatus.phoneNumber}`);
        return {
          success: true,
          message: `WhatsApp j√° conectado: ${currentStatus.phoneNumber}`
        };
      }
      
      // Tentar WPPConnect primeiro (mais confi√°vel para persist√™ncia)
      console.log(`üîÑ [CLIENT-WA] Tentando conex√£o via WPPConnect para ${clientId}`);
      try {
        const wppResult = await wppConnectService.createSession(clientId);
        if (wppResult.success && wppResult.qrCode) {
          console.log(`‚úÖ [CLIENT-WA] WPPConnect gerou QR Code com sucesso`);
          return {
            success: true,
            qrCode: wppResult.qrCode,
            message: "QR Code gerado via WPPConnect - escaneie com seu WhatsApp"
          };
        }
      } catch (wppError) {
        console.log(`‚ö†Ô∏è [CLIENT-WA] WPPConnect falhou, tentando Evolution API:`, wppError);
      }
      
      // Fallback para Evolution API
      console.log(`üîÑ [CLIENT-WA] Tentando conex√£o via Evolution API para ${clientId}`);
      const result = await evolutionApiService.connectClient(clientId);
      
      console.log(`üîó [Evolution] Resultado da conex√£o:`, {
        success: result.success,
        hasQrCode: !!result.qrCode,
        error: result.error
      });
      
      return result;
    } catch (error) {
      console.error(`‚ùå [CLIENT-WA] Erro geral na conex√£o:`, error);
      return {
        success: false,
        message: `Erro na conex√£o: ${error.message}`
      };
    }
  }

  async disconnectClient(clientId: string): Promise<{ success: boolean; message?: string }> {
    try {
      console.log(`üîå [CLIENT-WA] Desconectando via Evolution API cliente ${clientId}`);

      const result = await evolutionApiService.disconnectClient(clientId);
      
      console.log(`üîå [Evolution] Resultado da desconex√£o:`, result);
      
      return result;
    } catch (error) {
      console.error(`‚ùå [CLIENT-WA] Erro ao desconectar Evolution API:`, error);
      return { success: false, message: `Erro ao desconectar: ${error.message}` };
    }
  }

  async sendMessage(clientId: string, phoneNumber: string, message: string): Promise<{ success: boolean; messageId?: string; error?: string }> {
    try {
      console.log(`üì§ [CLIENT-WA] Enviando mensagem via Evolution API para ${phoneNumber}`);
      
      const result = await evolutionApiService.sendMessage(clientId, phoneNumber, message);
      
      console.log(`üì§ [Evolution] Resultado do envio:`, result);
      
      return result;
    } catch (error) {
      console.error(`‚ùå [CLIENT-WA] Erro ao enviar mensagem Evolution API:`, error);
      return { success: false, error: error.message };
    }
  }
}

export const clientWhatsAppService = new ClientWhatsAppService();