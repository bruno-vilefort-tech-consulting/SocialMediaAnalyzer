import { wppConnectService } from './wppConnectService';
import { enhancedConnectionService } from './enhancedConnectionService';
import { evolutionApiService } from './evolutionApiService';

interface WhatsAppClientConfig {
  isConnected: boolean;
  qrCode: string | null;
  phoneNumber: string | null;
  lastConnection: Date | null;
  clientId: string;
  instanceId?: string;
}

class ClientWhatsAppService {
  constructor() {
    console.log(`üîß [CLIENT-WA] ClientWhatsAppService inicializado`);
  }

  async getConnectionStatus(clientId: string): Promise<WhatsAppClientConfig> {
    console.log(`üîç [CLIENT-WA] Verificando status para cliente ${clientId}`);

    try {
      // PRIMEIRA VERIFICA√á√ÉO: WppConnect SessionStatus direto
      console.log(`üì± [CLIENT-WA] Testando WppConnect getSessionStatus`);
      
      const possibleKeys = [clientId, `client_${clientId}`];
      
      for (const key of possibleKeys) {
        try {
          const wppStatus = wppConnectService.getSessionStatus(key);
          console.log(`üìã [CLIENT-WA] Status ${key}:`, {
            exists: !!wppStatus,
            isConnected: wppStatus?.isConnected,
            hasClient: !!wppStatus?.client,
            phoneNumber: wppStatus?.phoneNumber
          });
          
          if (wppStatus && wppStatus.isConnected && wppStatus.client) {
            console.log(`‚úÖ [CLIENT-WA] WPPCONNECT DETECTADO! Key: ${key}`);
            
            let phoneNumber = wppStatus.phoneNumber;
            if (!phoneNumber) {
              try {
                const hostDevice = await wppStatus.client.getHostDevice();
                if (hostDevice?.wid?.user) {
                  phoneNumber = `+${hostDevice.wid.user}`;
                  console.log(`üì± [CLIENT-WA] N√∫mero obtido: ${phoneNumber}`);
                }
              } catch (deviceError: any) {
                console.log(`‚ö†Ô∏è [CLIENT-WA] Erro dispositivo:`, deviceError.message);
              }
            }
            
            return {
              isConnected: true,
              qrCode: null,
              phoneNumber: phoneNumber || 'Connected',
              lastConnection: new Date(),
              clientId,
              instanceId: `wpp_${clientId}`
            };
          }
        } catch (statusError: any) {
          console.log(`‚ùå [CLIENT-WA] Erro status ${key}:`, statusError.message);
        }
      }

      // SEGUNDA VERIFICA√á√ÉO: Enhanced Connection Service
      console.log(`üîç [CLIENT-WA] Testando Enhanced Connection Service`);
      
      try {
        const enhancedStatus = await enhancedConnectionService.getConnectionStatus(clientId);
        console.log(`üì± [CLIENT-WA] Enhanced:`, {
          isConnected: enhancedStatus.isConnected,
          phoneNumber: enhancedStatus.phoneNumber
        });
        
        if (enhancedStatus.isConnected && enhancedStatus.phoneNumber) {
          console.log(`‚úÖ [CLIENT-WA] ENHANCED SERVICE ATIVO!`);
          
          return {
            isConnected: true,
            qrCode: null,
            phoneNumber: enhancedStatus.phoneNumber,
            lastConnection: new Date(),
            clientId,
            instanceId: enhancedStatus.instanceId || `enhanced_${clientId}`
          };
        }
      } catch (enhancedError: any) {
        console.log(`‚ùå [CLIENT-WA] Erro Enhanced:`, enhancedError.message);
      }

      // TERCEIRA VERIFICA√á√ÉO: Evolution API
      console.log(`üîç [CLIENT-WA] Testando Evolution API`);
      
      try {
        const evolutionStatus = await evolutionApiService.getConnectionStatus(clientId);
        console.log(`üì± [Evolution] Status:`, {
          isConnected: evolutionStatus.isConnected,
          hasQrCode: !!evolutionStatus.qrCode,
          instanceId: evolutionStatus.instanceId
        });

        if (evolutionStatus.isConnected) {
          console.log(`‚úÖ [CLIENT-WA] Evolution API conectado!`);
          
          return {
            isConnected: true,
            qrCode: null,
            phoneNumber: evolutionStatus.phoneNumber || 'Connected',
            lastConnection: new Date(),
            clientId,
            instanceId: evolutionStatus.instanceId
          };
        }

        // Se Evolution tem QR Code, retornar para exibi√ß√£o
        if (evolutionStatus.qrCode) {
          console.log(`üì± [CLIENT-WA] Evolution API QR Code dispon√≠vel (${evolutionStatus.qrCode.length} chars)`);
          
          return {
            isConnected: false,
            qrCode: evolutionStatus.qrCode,
            phoneNumber: null,
            lastConnection: new Date(),
            clientId,
            instanceId: evolutionStatus.instanceId
          };
        }
      } catch (evolutionError: any) {
        console.log(`‚ùå [CLIENT-WA] Erro Evolution:`, evolutionError.message);
      }

      // NENHUMA CONEX√ÉO DETECTADA
      console.log(`‚ùå [CLIENT-WA] Nenhuma conex√£o ativa detectada para ${clientId}`);
      
      return {
        isConnected: false,
        qrCode: null,
        phoneNumber: null,
        lastConnection: null,
        clientId,
        instanceId: null
      };

    } catch (error: any) {
      console.log(`‚ùå [CLIENT-WA] Erro geral:`, error.message);
      
      return {
        isConnected: false,
        qrCode: null,
        phoneNumber: null,
        lastConnection: null,
        clientId,
        instanceId: null
      };
    }
  }

  async connectClient(clientId: string): Promise<{ success: boolean; qrCode?: string; message?: string }> {
    console.log(`üîó [CLIENT-WA] Conectando cliente ${clientId}`);
    
    try {
      // Tentar conectar via WppConnect primeiro
      console.log(`üì± [CLIENT-WA] Tentando conectar WppConnect`);
      const wppResult = await wppConnectService.connect(clientId);
      
      if (wppResult.success && wppResult.qrCode) {
        console.log(`‚úÖ [CLIENT-WA] WppConnect conectado com QR Code`);
        return {
          success: true,
          qrCode: wppResult.qrCode,
          message: 'Conectado via WppConnect'
        };
      }

      // Fallback para Evolution API
      console.log(`üì± [CLIENT-WA] Tentando conectar Evolution API`);
      const evolutionResult = await evolutionApiService.connectClient(clientId);
      
      if (evolutionResult.success) {
        console.log(`‚úÖ [CLIENT-WA] Evolution API conectado`);
        return evolutionResult;
      }

      return {
        success: false,
        message: 'Falha ao conectar via WppConnect e Evolution API'
      };

    } catch (error: any) {
      console.log(`‚ùå [CLIENT-WA] Erro connect:`, error.message);
      return {
        success: false,
        message: `Erro: ${error.message}`
      };
    }
  }

  async disconnectClient(clientId: string): Promise<{ success: boolean; message?: string }> {
    console.log(`üîå [CLIENT-WA] Desconectando cliente ${clientId}`);
    
    try {
      // Desconectar WppConnect
      const wppResult = await wppConnectService.disconnect(clientId);
      console.log(`üì± [CLIENT-WA] WppConnect disconnect:`, wppResult);

      // Desconectar Evolution API
      const evolutionResult = await evolutionApiService.disconnectClient(clientId);
      console.log(`üì± [CLIENT-WA] Evolution disconnect:`, evolutionResult);

      return {
        success: true,
        message: 'Desconectado de todos os servi√ßos'
      };

    } catch (error: any) {
      console.log(`‚ùå [CLIENT-WA] Erro disconnect:`, error.message);
      return {
        success: false,
        message: `Erro: ${error.message}`
      };
    }
  }

  async sendMessage(clientId: string, phoneNumber: string, message: string): Promise<{ success: boolean; messageId?: string; error?: string }> {
    console.log(`üì§ [CLIENT-WA] Enviando mensagem para ${phoneNumber}`);
    
    try {
      // Tentar enviar via WppConnect primeiro
      const wppResult = await wppConnectService.sendMessage(clientId, phoneNumber, message);
      
      if (wppResult.success) {
        console.log(`‚úÖ [CLIENT-WA] Mensagem enviada via WppConnect`);
        return wppResult;
      }

      // Fallback para Evolution API
      const evolutionResult = await evolutionApiService.sendMessage(clientId, phoneNumber, message);
      
      if (evolutionResult.success) {
        console.log(`‚úÖ [CLIENT-WA] Mensagem enviada via Evolution`);
        return evolutionResult;
      }

      return {
        success: false,
        error: 'Falha ao enviar via WppConnect e Evolution API'
      };

    } catch (error: any) {
      console.log(`‚ùå [CLIENT-WA] Erro sendMessage:`, error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

export const clientWhatsAppService = new ClientWhatsAppService();