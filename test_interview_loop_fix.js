// Teste manual para verificar se o loop infinito foi corrigido
// Simula mensagens WhatsApp diretas ao sistema

import { interactiveInterviewService } from './server/interactiveInterviewService.js';

console.log('üß™ INICIANDO TESTE DE CORRE√á√ÉO DO LOOP INFINITO');
console.log('================================================');

async function testInterviewFlow() {
  const testPhone = '553182956616';
  const testClientId = '1749849987543';
  
  try {
    console.log('\nüî∏ ETAPA 1: Enviando resposta "1" para iniciar entrevista');
    await interactiveInterviewService.handleMessage(testPhone, '1', null, testClientId);
    
    // Aguardar um pouco para entrevista iniciar
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('\nüî∏ ETAPA 2: Verificando se entrevista foi criada');
    const activeInterviews = interactiveInterviewService.getActiveInterviews();
    const interview = activeInterviews.get(testPhone);
    
    if (!interview) {
      console.log('‚ùå ERRO: Nenhuma entrevista ativa encontrada');
      return;
    }
    
    console.log(`‚úÖ Entrevista encontrada: pergunta atual ${interview.currentQuestion + 1}/${interview.questions.length}`);
    console.log(`üìù Job: ${interview.jobName}`);
    console.log(`üë§ Candidato: ${interview.candidateName}`);
    
    console.log('\nüî∏ ETAPA 3: Simulando resposta por √°udio para primeira pergunta');
    await interactiveInterviewService.handleMessage(testPhone, 'Minha primeira resposta em √°udio', null, testClientId);
    
    // Aguardar processamento
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('\nüî∏ ETAPA 4: Verificando se avan√ßou para segunda pergunta');
    const updatedInterview = activeInterviews.get(testPhone);
    
    if (!updatedInterview) {
      console.log('‚ùå ERRO: Entrevista foi removida inesperadamente');
      return;
    }
    
    console.log(`üìç Pergunta atual ap√≥s primeira resposta: ${updatedInterview.currentQuestion + 1}/${updatedInterview.questions.length}`);
    console.log(`üìä Respostas coletadas: ${updatedInterview.responses.length}`);
    
    if (updatedInterview.currentQuestion === 1) {
      console.log('‚úÖ SUCESSO: Entrevista avan√ßou corretamente para segunda pergunta');
    } else {
      console.log(`‚ùå ERRO: Entrevista n√£o avan√ßou corretamente (ainda na pergunta ${updatedInterview.currentQuestion + 1})`);
    }
    
    console.log('\nüî∏ ETAPA 5: Simulando resposta para segunda pergunta');
    await interactiveInterviewService.handleMessage(testPhone, 'Minha segunda resposta em √°udio', null, testClientId);
    
    // Aguardar processamento
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('\nüî∏ ETAPA 6: Verifica√ß√£o final do estado da entrevista');
    const finalInterview = activeInterviews.get(testPhone);
    
    if (!finalInterview) {
      console.log('‚úÖ SUCESSO: Entrevista foi finalizada e removida (se havia apenas 2 perguntas)');
    } else {
      console.log(`üìç Pergunta atual ap√≥s segunda resposta: ${finalInterview.currentQuestion + 1}/${finalInterview.questions.length}`);
      console.log(`üìä Respostas coletadas: ${finalInterview.responses.length}`);
      
      if (finalInterview.currentQuestion === 2 && finalInterview.questions.length > 2) {
        console.log('‚úÖ SUCESSO: Entrevista avan√ßou corretamente para terceira pergunta');
      } else if (finalInterview.currentQuestion >= finalInterview.questions.length) {
        console.log('‚úÖ SUCESSO: Entrevista deveria estar finalizada');
      } else {
        console.log(`‚ùå POSS√çVEL PROBLEMA: Estado inesperado da entrevista`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error);
  }
  
  console.log('\n================================================');
  console.log('üß™ TESTE DE CORRE√á√ÉO DO LOOP FINALIZADO');
}

// Executar teste
testInterviewFlow().catch(console.error);