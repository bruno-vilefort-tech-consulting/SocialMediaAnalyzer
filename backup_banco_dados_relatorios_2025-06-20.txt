DOCUMENTAÇÃO COMPLETA - BANCO DE DADOS DO SISTEMA DE RELATÓRIOS
===============================================================

Data: 20 de Junho de 2025
Sistema: Maximus IA - Painel de Relatórios
Database: Firebase Firestore

ESTRUTURA DO BANCO DE DADOS
===========================

1. COLEÇÃO: reports
---------------------
Purpose: Armazena metadados dos relatórios gerados
Document ID Pattern: "report_{selectionId}_{timestamp}"

Campos:
- id (string): Identificador único do relatório
- selectionId (string): ID da seleção vinculada
- selectionName (string): Nome da campanha de seleção
- jobName (string): Nome da vaga
- clientId (number): ID do cliente (isolamento de dados)
- clientName (string): Nome da empresa cliente
- candidateListName (string): Nome da lista de candidatos
- totalCandidates (number): Total de candidatos na seleção
- completedInterviews (number): Entrevistas finalizadas
- generatedAt (Timestamp): Data de geração do relatório
- createdAt (Timestamp): Data de criação

Exemplo:
{
  "id": "report_1750361142848_1750364164707",
  "selectionId": "1750361142848",
  "selectionName": "Consultor GM 17",
  "jobName": "Consultor",
  "clientId": 1749849987543,
  "clientName": "Grupo Maximuns",
  "candidateListName": "Consultor 10",
  "totalCandidates": 1,
  "completedInterviews": 1,
  "generatedAt": "2025-06-20T00:02:44.707Z",
  "createdAt": "2025-06-20T00:02:44.707Z"
}

2. COLEÇÃO: reportCandidates
---------------------------
Purpose: Candidatos específicos de cada relatório
Document ID Pattern: "report_{reportId}_{candidateId}"

Campos:
- id (string): Identificador único
- reportId (string): Referência ao relatório pai
- originalCandidateId (string): ID original do candidato
- name (string): Nome do candidato
- email (string): Email de contato
- whatsapp (string): Número WhatsApp
- totalScore (number): Pontuação total (0-100)
- status (string): "completed" | "pending"
- completedAt (Timestamp): Data de conclusão
- createdAt (Timestamp): Data de criação

Exemplo:
{
  "id": "report_1750361142848_1750364164707_1750309705713",
  "reportId": "report_1750361142848_1750364164707",
  "originalCandidateId": "1750309705713",
  "name": "Daniel Braga",
  "email": "dmbl@hotmail.com",
  "whatsapp": "5511984316526",
  "totalScore": 0,
  "status": "completed",
  "completedAt": "2025-06-20T00:02:46.329Z",
  "createdAt": "2025-06-20T00:02:46.329Z"
}

3. COLEÇÃO: candidateCategories
------------------------------
Purpose: Sistema de categorização de candidatos
Document ID Pattern: "candidate_{candidateId}_selection_{selectionId}"

Campos:
- id (string): Identificador único
- candidateId (number): ID do candidato
- selectionId (string): ID da seleção
- reportId (string): ID do relatório
- clientId (number): ID do cliente (controle de acesso)
- category (string): "melhor" | "mediano" | "em_duvida" | "nao_contratar"
- createdAt (string): Data de criação ISO
- updatedAt (string): Data da última atualização ISO

Exemplo:
{
  "id": "candidate_1750309705713_selection_1750361142848",
  "candidateId": 1750309705713,
  "selectionId": "1750361142848",
  "reportId": "report_1750361142848_1750364164707",
  "clientId": 1749849987543,
  "category": "melhor",
  "createdAt": "2025-06-20T05:08:12.175Z",
  "updatedAt": "2025-06-20T05:08:12.175Z"
}

Categorias Disponíveis:
- "melhor" (cor verde) - Candidatos top
- "mediano" (cor laranja) - Candidatos médios
- "em_duvida" (cor cinza) - Necessita mais avaliação
- "nao_contratar" (cor vermelha) - Candidatos rejeitados

4. COLEÇÃO: reportResponses
--------------------------
Purpose: Respostas individuais dos candidatos por pergunta
Document ID Pattern: "{reportId}_{reportCandidateId}_R{questionNumber}"

Campos:
- id (string): Identificador único
- reportId (string): ID do relatório
- reportCandidateId (string): ID do candidato no relatório
- questionNumber (number): Número da pergunta (1, 2, 3...)
- questionText (string): Texto da pergunta
- transcription (string): Transcrição do áudio via Whisper
- audioFile (string): Nome do arquivo de áudio (.ogg)
- score (number): Pontuação da resposta (0-100)
- aiAnalysis (string): Análise da IA (ChatGPT)
- recordingDuration (number): Duração da gravação em segundos
- createdAt (Timestamp): Data de criação

Exemplo:
{
  "id": "report_1750361142848_1750364164707_report_1750361142848_1750364164707_1750309705713_R1",
  "reportId": "report_1750361142848_1750364164707",
  "reportCandidateId": "report_1750361142848_1750364164707_1750309705713",
  "questionNumber": 1,
  "questionText": "Você é consultor há quanto tempo? Pode me explicar com detalhes e me dar uma resposta longa.",
  "transcription": "Oi, tudo bem? Eu queria falar que eu sou consultor há bastante tempo e gosto muito de trabalhar com isso, sabe?",
  "audioFile": "audio_5511984316526_1750361142848_R1.ogg",
  "score": 0,
  "aiAnalysis": "",
  "recordingDuration": 0,
  "createdAt": "2025-06-20T00:02:46.515Z"
}

RELACIONAMENTOS ENTRE COLEÇÕES
==============================

1. reports (1) -> reportCandidates (N)
   - reports.id = reportCandidates.reportId

2. reportCandidates (1) -> reportResponses (N)
   - reportCandidates.id = reportResponses.reportCandidateId

3. candidateCategories -> Independente (join por candidateId + selectionId)

4. Filtro de Segurança: clientId
   - Todas as consultas DEVEM filtrar por clientId
   - Masters podem ver todos os clientes
   - Clientes veem apenas seus próprios dados

QUERIES PRINCIPAIS
==================

1. Listar Relatórios:
   Filter: clientId == userClientId
   OrderBy: createdAt desc

2. Candidatos do Relatório:
   Filter: reportId == selectedReportId
   OrderBy: totalScore desc

3. Categorias da Seleção:
   Filter: selectionId == selectedSelectionId AND clientId == userClientId
   
4. Respostas do Candidato:
   Filter: reportCandidateId == selectedCandidateId
   OrderBy: questionNumber asc

ÍNDICES RECOMENDADOS
===================

1. reports:
   - clientId (single)
   - createdAt (single)
   - clientId + createdAt (composite)

2. reportCandidates:
   - reportId (single)
   - totalScore (single)

3. candidateCategories:
   - selectionId + clientId (composite)
   - candidateId + selectionId (composite)

4. reportResponses:
   - reportCandidateId (single)
   - questionNumber (single)

FLUXO DE DADOS
==============

1. GERAÇÃO DE RELATÓRIO:
   a) Cria documento em "reports"
   b) Para cada candidato, cria em "reportCandidates"
   c) Para cada resposta, cria em "reportResponses"

2. CATEGORIZAÇÃO:
   a) Frontend envia POST com categoria
   b) Backend faz upsert em "candidateCategories"
   c) Frontend atualiza cache local

3. VISUALIZAÇÃO:
   a) Lista relatórios (filtro por clientId)
   b) Seleciona relatório específico
   c) Carrega candidatos + categorias + respostas
   d) Renderiza interface com dados completos

SEGURANÇA E ISOLAMENTO
=====================

1. CONTROLE DE ACESSO:
   - Middleware verifica JWT em todas as rotas
   - Role "master" acessa todos os dados
   - Role "client" acessa apenas seu clientId

2. FILTROS OBRIGATÓRIOS:
   - GET /api/reports: WHERE clientId = userClientId
   - GET /api/reports/candidate-categories: WHERE clientId = userClientId
   - Todos os endpoints verificam ownership

3. VALIDAÇÃO:
   - Zod schemas para validação de entrada
   - Verificação de existência de documentos
   - Logs detalhados para auditoria

ARQUIVOS DE ÁUDIO
=================

Localização: uploads/
Formato: .ogg (compatível com WhatsApp)
Nomenclatura: audio_{whatsapp}_{selectionId}_R{questionNumber}.ogg

Exemplo: audio_5511984316526_1750361142848_R1.ogg

Player integrado suporta:
- Play/Pause/Stop
- Controle de volume
- Estado sincronizado

BACKUP E RESTORE
================

Para restaurar o sistema:

1. VERIFICAR COLEÇÕES:
   - reports (deve ter documentos)
   - reportCandidates (deve ter documentos)
   - candidateCategories (pode estar vazia)
   - reportResponses (deve ter documentos)

2. VERIFICAR ENDPOINTS:
   - GET /api/reports
   - GET /api/reports/:reportId/candidates
   - GET /api/reports/candidate-categories/:selectionId
   - POST /api/reports/candidate-categories
   - GET /api/reports/:reportId/responses/:candidateId

3. VERIFICAR FRONTEND:
   - ReportsHistoryPage.tsx carrega
   - Botão "Relatórios" funciona
   - Categorização persiste
   - Player de áudio reproduz

4. TESTAR FLUXO:
   - Login -> Relatórios -> Ver Candidatos -> Categorizar -> Verificar persistência

TROUBLESHOOTING
===============

Problema: Dados não carregam
Solução: Verificar filtro por clientId nos endpoints

Problema: Categorias não salvam
Solução: Verificar POST /api/reports/candidate-categories

Problema: Áudio não reproduz
Solução: Verificar paths em uploads/ e extensão .ogg

Problema: Acesso negado
Solução: Verificar JWT e role do usuário

Problema: Performance lenta
Solução: Implementar paginação e cache adequado

MÉTRICAS DO SISTEMA
==================

- Coleções: 4 principais
- Endpoints: 5 específicos de relatórios
- Roles: 2 (master/client)
- Categorias: 4 tipos
- Formato Audio: .ogg
- Cache: TanStack Query
- Segurança: JWT + clientId filtering

STATUS: ✅ COMPLETAMENTE FUNCIONAL
ÚLTIMA VERIFICAÇÃO: 20/06/2025 05:10 AM
BACKUP CRIADO POR: Replit Agent
RESTORE READY: SIM