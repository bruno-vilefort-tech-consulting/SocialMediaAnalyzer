import admin from 'firebase-admin';

// Inicializar Firebase
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.FIREBASE_PROJECT_ID,
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
    })
  });
}

const firebaseDb = admin.firestore();

async function corrigirClientIdCandidatos() {
  try {
    console.log('üîç Buscando candidatos problem√°ticos...');
    
    // Buscar todos os candidatos
    const candidatesSnapshot = await firebaseDb.collection('candidates').get();
    const candidates = candidatesSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    console.log(`üìã Total de candidatos encontrados: ${candidates.length}`);
    
    // Identificar candidatos sem clientId v√°lido
    const problematicCandidates = candidates.filter(candidate => {
      const hasValidClientId = candidate.clientId && !isNaN(candidate.clientId) && candidate.clientId > 0;
      return !hasValidClientId;
    });
    
    console.log(`‚ùå Candidatos com clientId inv√°lido: ${problematicCandidates.length}`);
    
    if (problematicCandidates.length === 0) {
      console.log('‚úÖ Todos os candidatos j√° possuem clientId v√°lido');
      return;
    }
    
    // Para cada candidato problem√°tico, buscar nas memberships para descobrir o clientId correto
    for (const candidate of problematicCandidates) {
      console.log(`\nüîç Analisando candidato: ${candidate.name} (ID: ${candidate.id})`);
      console.log(`   ClientId atual: ${candidate.clientId}`);
      
      // Buscar memberships deste candidato
      const membershipsSnapshot = await firebaseDb
        .collection('candidate-list-memberships')
        .where('candidateId', '==', parseInt(candidate.id))
        .get();
      
      if (!membershipsSnapshot.empty) {
        const membership = membershipsSnapshot.docs[0].data();
        const correctClientId = membership.clientId;
        
        console.log(`   ‚úÖ ClientId correto encontrado na membership: ${correctClientId}`);
        
        // Atualizar o candidato com o clientId correto
        await firebaseDb.collection('candidates').doc(candidate.id).update({
          clientId: correctClientId
        });
        
        console.log(`   üíæ Candidato ${candidate.name} atualizado com clientId: ${correctClientId}`);
      } else {
        console.log(`   ‚ùå Nenhuma membership encontrada para candidato ${candidate.name}`);
        console.log(`   üóëÔ∏è  Candidato √≥rf√£o - considere remover ou atribuir manualmente`);
      }
    }
    
    console.log('\n‚úÖ Corre√ß√£o de clientId conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
  } finally {
    process.exit(0);
  }
}

corrigirClientIdCandidatos();